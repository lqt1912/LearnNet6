//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export module MyClientModule {
namespace MyClientNamespace {

export class IdentityUserOfGuid implements IIdentityUserOfGuid {
    id!: string;
    userName?: string | undefined;
    normalizedUserName?: string | undefined;
    email?: string | undefined;
    normalizedEmail?: string | undefined;
    emailConfirmed!: boolean;
    passwordHash?: string | undefined;
    securityStamp?: string | undefined;
    concurrencyStamp?: string | undefined;
    phoneNumber?: string | undefined;
    phoneNumberConfirmed!: boolean;
    twoFactorEnabled!: boolean;
    lockoutEnd?: Date | undefined;
    lockoutEnabled!: boolean;
    accessFailedCount!: number;

    constructor(data?: IIdentityUserOfGuid) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"];
            this.userName = _data["UserName"];
            this.normalizedUserName = _data["NormalizedUserName"];
            this.email = _data["Email"];
            this.normalizedEmail = _data["NormalizedEmail"];
            this.emailConfirmed = _data["EmailConfirmed"];
            this.passwordHash = _data["PasswordHash"];
            this.securityStamp = _data["SecurityStamp"];
            this.concurrencyStamp = _data["ConcurrencyStamp"];
            this.phoneNumber = _data["PhoneNumber"];
            this.phoneNumberConfirmed = _data["PhoneNumberConfirmed"];
            this.twoFactorEnabled = _data["TwoFactorEnabled"];
            this.lockoutEnd = _data["LockoutEnd"] ? new Date(_data["LockoutEnd"].toString()) : <any>undefined;
            this.lockoutEnabled = _data["LockoutEnabled"];
            this.accessFailedCount = _data["AccessFailedCount"];
        }
    }

    static fromJS(data: any): IdentityUserOfGuid {
        data = typeof data === 'object' ? data : {};
        let result = new IdentityUserOfGuid();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["UserName"] = this.userName;
        data["NormalizedUserName"] = this.normalizedUserName;
        data["Email"] = this.email;
        data["NormalizedEmail"] = this.normalizedEmail;
        data["EmailConfirmed"] = this.emailConfirmed;
        data["PasswordHash"] = this.passwordHash;
        data["SecurityStamp"] = this.securityStamp;
        data["ConcurrencyStamp"] = this.concurrencyStamp;
        data["PhoneNumber"] = this.phoneNumber;
        data["PhoneNumberConfirmed"] = this.phoneNumberConfirmed;
        data["TwoFactorEnabled"] = this.twoFactorEnabled;
        data["LockoutEnd"] = this.lockoutEnd ? this.lockoutEnd.toISOString() : <any>undefined;
        data["LockoutEnabled"] = this.lockoutEnabled;
        data["AccessFailedCount"] = this.accessFailedCount;
        return data;
    }
}

export interface IIdentityUserOfGuid {
    id: string;
    userName?: string | undefined;
    normalizedUserName?: string | undefined;
    email?: string | undefined;
    normalizedEmail?: string | undefined;
    emailConfirmed: boolean;
    passwordHash?: string | undefined;
    securityStamp?: string | undefined;
    concurrencyStamp?: string | undefined;
    phoneNumber?: string | undefined;
    phoneNumberConfirmed: boolean;
    twoFactorEnabled: boolean;
    lockoutEnd?: Date | undefined;
    lockoutEnabled: boolean;
    accessFailedCount: number;
}

export class ApplicationUser extends IdentityUserOfGuid implements IApplicationUser {
    firstName?: string | undefined;
    lastName?: string | undefined;
    posts!: Post[];
    refreshTokens!: RefreshToken[];
    addressId?: string | undefined;
    address?: Address | undefined;

    constructor(data?: IApplicationUser) {
        super(data);
        if (data) {
            this.address = data.address && !(<any>data.address).toJSON ? new Address(data.address) : <Address>this.address;
        }
        if (!data) {
            this.posts = [];
            this.refreshTokens = [];
        }
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.firstName = _data["FirstName"];
            this.lastName = _data["LastName"];
            if (Array.isArray(_data["Posts"])) {
                this.posts = [] as any;
                for (let item of _data["Posts"])
                    this.posts!.push(Post.fromJS(item));
            }
            if (Array.isArray(_data["RefreshTokens"])) {
                this.refreshTokens = [] as any;
                for (let item of _data["RefreshTokens"])
                    this.refreshTokens!.push(RefreshToken.fromJS(item));
            }
            this.addressId = _data["AddressId"];
            this.address = _data["Address"] ? Address.fromJS(_data["Address"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): ApplicationUser {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicationUser();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["FirstName"] = this.firstName;
        data["LastName"] = this.lastName;
        if (Array.isArray(this.posts)) {
            data["Posts"] = [];
            for (let item of this.posts)
                data["Posts"].push(item.toJSON());
        }
        if (Array.isArray(this.refreshTokens)) {
            data["RefreshTokens"] = [];
            for (let item of this.refreshTokens)
                data["RefreshTokens"].push(item.toJSON());
        }
        data["AddressId"] = this.addressId;
        data["Address"] = this.address ? this.address.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IApplicationUser extends IIdentityUserOfGuid {
    firstName?: string | undefined;
    lastName?: string | undefined;
    posts: Post[];
    refreshTokens: RefreshToken[];
    addressId?: string | undefined;
    address?: IAddress | undefined;
}

export class BaseEntity implements IBaseEntity {
    id!: string;

    constructor(data?: IBaseEntity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"];
        }
    }

    static fromJS(data: any): BaseEntity {
        data = typeof data === 'object' ? data : {};
        let result = new BaseEntity();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        return data;
    }
}

export interface IBaseEntity {
    id: string;
}

export class Post extends BaseEntity implements IPost {
    title!: string;
    authorId!: string;
    author!: ApplicationUser;

    constructor(data?: IPost) {
        super(data);
        if (data) {
            this.author = data.author && !(<any>data.author).toJSON ? new ApplicationUser(data.author) : <ApplicationUser>this.author;
        }
        if (!data) {
            this.author = new ApplicationUser();
        }
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.title = _data["Title"];
            this.authorId = _data["AuthorId"];
            this.author = _data["Author"] ? ApplicationUser.fromJS(_data["Author"]) : new ApplicationUser();
        }
    }

    static override fromJS(data: any): Post {
        data = typeof data === 'object' ? data : {};
        let result = new Post();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Title"] = this.title;
        data["AuthorId"] = this.authorId;
        data["Author"] = this.author ? this.author.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IPost extends IBaseEntity {
    title: string;
    authorId: string;
    author: IApplicationUser;
}

export class RefreshToken extends BaseEntity implements IRefreshToken {
    value!: string;
    createdDate!: Date;
    expiredDate!: Date;
    revokedDate?: Date | undefined;
    isDeleted!: boolean;
    userId!: string;
    user!: ApplicationUser;

    constructor(data?: IRefreshToken) {
        super(data);
        if (data) {
            this.user = data.user && !(<any>data.user).toJSON ? new ApplicationUser(data.user) : <ApplicationUser>this.user;
        }
        if (!data) {
            this.user = new ApplicationUser();
        }
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.value = _data["Value"];
            this.createdDate = _data["CreatedDate"] ? new Date(_data["CreatedDate"].toString()) : <any>undefined;
            this.expiredDate = _data["ExpiredDate"] ? new Date(_data["ExpiredDate"].toString()) : <any>undefined;
            this.revokedDate = _data["RevokedDate"] ? new Date(_data["RevokedDate"].toString()) : <any>undefined;
            this.isDeleted = _data["IsDeleted"];
            this.userId = _data["UserId"];
            this.user = _data["User"] ? ApplicationUser.fromJS(_data["User"]) : new ApplicationUser();
        }
    }

    static override fromJS(data: any): RefreshToken {
        data = typeof data === 'object' ? data : {};
        let result = new RefreshToken();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Value"] = this.value;
        data["CreatedDate"] = this.createdDate ? this.createdDate.toISOString() : <any>undefined;
        data["ExpiredDate"] = this.expiredDate ? this.expiredDate.toISOString() : <any>undefined;
        data["RevokedDate"] = this.revokedDate ? this.revokedDate.toISOString() : <any>undefined;
        data["IsDeleted"] = this.isDeleted;
        data["UserId"] = this.userId;
        data["User"] = this.user ? this.user.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IRefreshToken extends IBaseEntity {
    value: string;
    createdDate: Date;
    expiredDate: Date;
    revokedDate?: Date | undefined;
    isDeleted: boolean;
    userId: string;
    user: IApplicationUser;
}

export class Address extends BaseEntity implements IAddress {
    district!: string;
    city!: string;
    detail!: string;
    latitude!: string;
    longtitude!: string;

    constructor(data?: IAddress) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.district = _data["District"];
            this.city = _data["City"];
            this.detail = _data["Detail"];
            this.latitude = _data["Latitude"];
            this.longtitude = _data["Longtitude"];
        }
    }

    static override fromJS(data: any): Address {
        data = typeof data === 'object' ? data : {};
        let result = new Address();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["District"] = this.district;
        data["City"] = this.city;
        data["Detail"] = this.detail;
        data["Latitude"] = this.latitude;
        data["Longtitude"] = this.longtitude;
        super.toJSON(data);
        return data;
    }
}

export interface IAddress extends IBaseEntity {
    district: string;
    city: string;
    detail: string;
    latitude: string;
    longtitude: string;
}

export class Card extends BaseEntity implements ICard {
    title!: string;
    order!: number;
    type?: CardType | undefined;
    cardAuthor?: string | undefined;
    estimateValue?: number | undefined;
    assignedTo?: string | undefined;

    constructor(data?: ICard) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.title = _data["Title"];
            this.order = _data["Order"];
            this.type = _data["Type"];
            this.cardAuthor = _data["CardAuthor"];
            this.estimateValue = _data["EstimateValue"];
            this.assignedTo = _data["AssignedTo"];
        }
    }

    static override fromJS(data: any): Card {
        data = typeof data === 'object' ? data : {};
        let result = new Card();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Title"] = this.title;
        data["Order"] = this.order;
        data["Type"] = this.type;
        data["CardAuthor"] = this.cardAuthor;
        data["EstimateValue"] = this.estimateValue;
        data["AssignedTo"] = this.assignedTo;
        super.toJSON(data);
        return data;
    }
}

export interface ICard extends IBaseEntity {
    title: string;
    order: number;
    type?: CardType | undefined;
    cardAuthor?: string | undefined;
    estimateValue?: number | undefined;
    assignedTo?: string | undefined;
}

export enum CardType {
    From = 0,
    To = 1,
}

export class NotificationToken implements INotificationToken {
    id!: string;
    value!: string;
    userId!: string;
    user!: AdUser;

    constructor(data?: INotificationToken) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.user = data.user && !(<any>data.user).toJSON ? new AdUser(data.user) : <AdUser>this.user;
        }
        if (!data) {
            this.user = new AdUser();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"];
            this.value = _data["Value"];
            this.userId = _data["UserId"];
            this.user = _data["User"] ? AdUser.fromJS(_data["User"]) : new AdUser();
        }
    }

    static fromJS(data: any): NotificationToken {
        data = typeof data === 'object' ? data : {};
        let result = new NotificationToken();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["Value"] = this.value;
        data["UserId"] = this.userId;
        data["User"] = this.user ? this.user.toJSON() : <any>undefined;
        return data;
    }
}

export interface INotificationToken {
    id: string;
    value: string;
    userId: string;
    user: IAdUser;
}

export class AdUser implements IAdUser {
    userPrincipalName!: string;
    displayName!: string;
    surname!: string;
    mail!: string;
    givenName!: string;
    oId!: string;
    userType!: string;
    jobTitle!: string;
    department!: string;
    accountEnabled!: string;
    usageLocation!: string;
    streetAddress!: string;
    state!: string;
    country!: string;
    officeLocation!: string;
    city!: string;
    postalCode!: string;
    telephoneNumber!: string;
    mobilePhone!: string;
    alternateEmailAddress!: string;
    ageGroup!: string;
    consentProvidedForMinor!: string;
    legalAgeGroupClassification!: string;
    companyName!: string;
    creationType!: string;
    directorySynced!: string;
    invitationState!: string;
    identityIssuer!: string;
    createdDateTime!: string;
    id!: string;
    notificationTokens!: NotificationToken[];

    constructor(data?: IAdUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.notificationTokens) {
                this.notificationTokens = [];
                for (let i = 0; i < data.notificationTokens.length; i++) {
                    let item = data.notificationTokens[i];
                    this.notificationTokens[i] = item && !(<any>item).toJSON ? new NotificationToken(item) : <NotificationToken>item;
                }
            }
        }
        if (!data) {
            this.notificationTokens = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userPrincipalName = _data["userPrincipalName"];
            this.displayName = _data["displayName"];
            this.surname = _data["surname"];
            this.mail = _data["mail"];
            this.givenName = _data["givenName"];
            this.oId = _data["OId"];
            this.userType = _data["userType"];
            this.jobTitle = _data["jobTitle"];
            this.department = _data["department"];
            this.accountEnabled = _data["accountEnabled"];
            this.usageLocation = _data["usageLocation"];
            this.streetAddress = _data["streetAddress"];
            this.state = _data["state"];
            this.country = _data["country"];
            this.officeLocation = _data["officeLocation"];
            this.city = _data["city"];
            this.postalCode = _data["postalCode"];
            this.telephoneNumber = _data["telephoneNumber"];
            this.mobilePhone = _data["mobilePhone"];
            this.alternateEmailAddress = _data["alternateEmailAddress"];
            this.ageGroup = _data["ageGroup"];
            this.consentProvidedForMinor = _data["consentProvidedForMinor"];
            this.legalAgeGroupClassification = _data["legalAgeGroupClassification"];
            this.companyName = _data["companyName"];
            this.creationType = _data["creationType"];
            this.directorySynced = _data["directorySynced"];
            this.invitationState = _data["invitationState"];
            this.identityIssuer = _data["identityIssuer"];
            this.createdDateTime = _data["createdDateTime"];
            this.id = _data["Id"];
            if (Array.isArray(_data["NotificationTokens"])) {
                this.notificationTokens = [] as any;
                for (let item of _data["NotificationTokens"])
                    this.notificationTokens!.push(NotificationToken.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AdUser {
        data = typeof data === 'object' ? data : {};
        let result = new AdUser();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userPrincipalName"] = this.userPrincipalName;
        data["displayName"] = this.displayName;
        data["surname"] = this.surname;
        data["mail"] = this.mail;
        data["givenName"] = this.givenName;
        data["OId"] = this.oId;
        data["userType"] = this.userType;
        data["jobTitle"] = this.jobTitle;
        data["department"] = this.department;
        data["accountEnabled"] = this.accountEnabled;
        data["usageLocation"] = this.usageLocation;
        data["streetAddress"] = this.streetAddress;
        data["state"] = this.state;
        data["country"] = this.country;
        data["officeLocation"] = this.officeLocation;
        data["city"] = this.city;
        data["postalCode"] = this.postalCode;
        data["telephoneNumber"] = this.telephoneNumber;
        data["mobilePhone"] = this.mobilePhone;
        data["alternateEmailAddress"] = this.alternateEmailAddress;
        data["ageGroup"] = this.ageGroup;
        data["consentProvidedForMinor"] = this.consentProvidedForMinor;
        data["legalAgeGroupClassification"] = this.legalAgeGroupClassification;
        data["companyName"] = this.companyName;
        data["creationType"] = this.creationType;
        data["directorySynced"] = this.directorySynced;
        data["invitationState"] = this.invitationState;
        data["identityIssuer"] = this.identityIssuer;
        data["createdDateTime"] = this.createdDateTime;
        data["Id"] = this.id;
        if (Array.isArray(this.notificationTokens)) {
            data["NotificationTokens"] = [];
            for (let item of this.notificationTokens)
                data["NotificationTokens"].push(item.toJSON());
        }
        return data;
    }
}

export interface IAdUser {
    userPrincipalName: string;
    displayName: string;
    surname: string;
    mail: string;
    givenName: string;
    oId: string;
    userType: string;
    jobTitle: string;
    department: string;
    accountEnabled: string;
    usageLocation: string;
    streetAddress: string;
    state: string;
    country: string;
    officeLocation: string;
    city: string;
    postalCode: string;
    telephoneNumber: string;
    mobilePhone: string;
    alternateEmailAddress: string;
    ageGroup: string;
    consentProvidedForMinor: string;
    legalAgeGroupClassification: string;
    companyName: string;
    creationType: string;
    directorySynced: string;
    invitationState: string;
    identityIssuer: string;
    createdDateTime: string;
    id: string;
    notificationTokens: INotificationToken[];
}

}
}